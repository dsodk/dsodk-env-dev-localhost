---

################################
# Reference:
#* https://docs.github.com/articles/generating-a-gpg-key/
#* https://docs.github.com/en/authentication/managing-commit-signature-verification/telling-git-about-your-signing-key (Instructions for other Platform)
#* https://www.gnupg.org/documentation/manuals/gnupg/Unattended-GPG-key-generation.html
# Command to manually generate a gpg key:
# ```gpg --full-generate-key```
# Command to manually delete a gpg key
# ```gpg --list-secret-keys --keyid-format=long```
# ```gpg --delete-secret-key 5A123456789B3E```
# ```gpg --list-keys --keyid-format=long```
# ```gpg --delete-key 5A123456789B3E```
# Command to manually delete gpg keys when it's the only key in your secring
# ```gpg --delete-secret-key $(gpg --list-secret-keys --keyid-format=long |grep '^sec' |awk -F '/' '{print $2}' |awk '{print $1}')```
# ```gpg --delete-key $(gpg --list-keys --keyid-format=long |grep '^pub' |awk -F '/' '{print $2}' |awk '{print $1}')```
# Command to get gpg secret key ID after it exists
#  gpg --list-secret-keys --keyid-format=long "{{ gpg_key_personal_user_email }}" |grep "sec " |awk -F '/' '{print $2}' |awk -F ' ' '{print $1}'
# Command to get gpg
################################
# GPG KEY ROTATION: https://wincent.com/wiki/GPG_key_rotation_notes
################################


################################
# GPGKEY_PERSONAL_USERNAME
################################

- name: Setting ansible variable 'gpg_key_personal_user_name' from 'GPGKEY_PERSONAL_USERNAME' env variable
  set_fact:
    gpg_key_personal_user_name: "{{ lookup('ansible.builtin.env', 'GPGKEY_PERSONAL_USERNAME', default=Undefined) }}"

- name: Fail if env variable GPGKEY_PERSONAL_USERNAME is not defined
  fail: msg="Environment Variable GPGKEY_PERSONAL_USERNAME is not defined in your shell. Please set it and then try this ansible playbook again."
  when: gpg_key_personal_user_name is undefined

################################
# GPGKEY_PERSONAL_REALNAME
################################

- name: Setting ansible variable 'gpg_key_personal_real_name' from 'GPGKEY_PERSONAL_REALNAME' env variable
  set_fact:
    gpg_key_personal_real_name: "{{ lookup('ansible.builtin.env', 'GPGKEY_PERSONAL_REALNAME', default=Undefined) }}"

- name: Fail if env variable 'GPGKEY_PERSONAL_REALNAME' is not defined
  fail: msg="Environment Variable GPGKEY_PERSONAL_REALNAME is not defined in your shell. Please set it and then try this ansible playbook again."
  when: gpg_key_personal_real_name is undefined

################################
# GPGKEY_PERSONAL_USEREMAIL
################################

- name: Setting ansible variable 'gpg_key_personal_user_email' from 'GPGKEY_PERSONAL_USEREMAIL' env variable
  set_fact:
    gpg_key_personal_user_email: "{{ lookup('ansible.builtin.env', 'GPGKEY_PERSONAL_USEREMAIL', default=Undefined) }}"

- name: Fail if env variable GPGKEY_PERSONAL_USEREMAIL is not defined
  fail: msg="Environment Variable GPGKEY_PERSONAL_USEREMAIL is not defined in your shell. Please set it and then try this ansible playbook again."
  when: gpg_key_personal_user_email is undefined

################################
# Check if GPG KEY exists
################################

- name: Check if gpg key exists
  shell: gpg --list-keys {{ gpg_key_personal_user_email }}  # If key exists [return_code=0] -- If key DOES NOT exist [return_code=2]
  #shell: gpg --list-secret-keys {{ gpg_key_personal_user_email }}
  register: gpg_key_personal_exists_check
  ignore_errors: yes
  #failed_when: gpg_key_personal_exists_check.rc != 0 or gpg_key_personal_exists_check.rc != 2

################################
# GPGKEY_PERSONAL_PASSPHRASE
################################

#- name: Setting ansible variable 'gpg_key_personal_passphrase' from 'GPGKEY_PERSONAL_PASSPHRASE' env variable
#  set_fact:
#    gpg_key_personal_passphrase: "{{ lookup('ansible.builtin.env', 'GPGKEY_PERSONAL_PASSPHRASE', default=Undefined) }}"
#  when: gpg_key_personal_exists_check.rc != 0  # Only when gpg key does not exist
#
#- name: Fail if env variable GPGKEY_PERSONAL_PASSPHRASE is not defined
#  fail: msg="Environment Variable GPGKEY_PERSONAL_PASSPHRASE is not defined in your shell. Please set it and then try this ansible playbook again."
#  when:
#    - gpg_key_personal_exists_check.rc != 0   # Only when gpg key does not exist
#    - gpg_key_personal_passphrase is undefined

################################
# CREATE GPGKEY GENERATE ANSWERFILE - (AS REQUIRED)
################################

- name: Create a temporary gpg generate-key answer file in 'HOME/.gnupg'
  copy:
    dest: "{{ ansible_facts['user_dir'] }}/.gnupg/tmp-gpg-identity-generate-key-answerfile"
    content: |
      %echo Generating a basic OpenPGP key
        Key-Type: 1
        Key-Length: 4096
        Subkey-Type: RSA
        Subkey-Length: 4096
        ### Possible Subkey-Usage [encrypt, sign, auth]
        Subkey-Usage: encrypt
        Name-Real: {{ gpg_key_personal_real_name }}
        Name-Comment: {{ gpg_key_personal_user_name }}
        Name-Email: {{ gpg_key_personal_user_email }}
        ### GPG Key expiration gets set to July 25th of following year in ISO Format: YYYY0725T090000
        Expire-Date: {{ gpg_key_next_expiration_date }}
        # Passphrase: << gpg_key_personal_passphrase >>
        %no-ask-passphrase
        %no-protection
        %commit
      %echo done
  when: gpg_key_personal_exists_check.rc != 0   # Only when gpg key does not exist

- name: List GPGKEY Expiration Date set in answer file
  debug:
    msg: "gpg_key_next_expiration_date is {{ gpg_key_next_expiration_date }}"
  when: gpg_key_personal_exists_check.rc != 0   # Only when gpg key does not exist

################################
# GPGKEY GENERATE - (AS REQUIRED)
################################

- name: Generate gpg primary key and subkey for encrypt '{{ gpg_key_personal_user_email }}' if it does not exist yet
  shell: "gpg --batch --full-generate-key {{ ansible_facts['user_dir'] }}/.gnupg/tmp-gpg-identity-generate-key-answerfile"
  when: gpg_key_personal_exists_check.rc != 0   # Only when gpg key does not exist

- name: Generate gpg subkey for signing '{{ gpg_key_personal_user_email }}' if it does not exist yet
  shell: "gpg --batch --passphrase '' --quick-add-key $(gpg --list-options show-only-fpr-mbox --list-secret-keys {{ gpg_key_personal_user_email }} | awk '{print $1}') rsa4096 sign {{ gpg_key_next_expiration_date }}"
  when: gpg_key_personal_exists_check.rc != 0   # Only when gpg key does not exist

################################
# UPDATE SHELL_RCFILE TO ADD GPG KEY TO SHELL
################################

- name: Check for GPG_TTY in shell_rcfile
  shell: grep -c "export GPG_TTY" "{{ ansible_facts['user_dir'] }}/{{ shell_rcfile }}" || true
  register: gpg_tty_exists_in_rcfile

- name: Insert/Update config lines in 'HOME/{{ shell_rcfile }}' for adding GPG key
  ansible.builtin.blockinfile:
    path: "{{ ansible_facts['user_dir'] }}/{{ shell_rcfile }}"
    marker: "{mark}"
    marker_begin: "#----------[gpg-identity]---ANSIBLE MANAGED BLOCK---BEGIN"
    marker_end:   "#----------[gpg-identity]---ANSIBLE MANAGED BLOCK---END"
    backup: yes
    block: |
      # Add GPG Key
      export GPG_TTY=$(tty)
  when: gpg_tty_exists_in_rcfile.stdout == "0"

################################
# DELETE GPGKEY ANSWER FILE (AS REQUIRED)
################################

- name: Delete temporary gpg generate-key answer file in 'HOME/.gnupg' if it exists
  ansible.builtin.file:
    path: "{{ ansible_facts['user_dir'] }}/.gnupg/tmp-gpg-identity-generate-key-answerfile"
    state: absent

################################
# UNSET GPGKEY_PERSONAL_PASSPHRASE Variables (AS REQUIRED)
################################

- name: Unset ansible variable 'gpg_key_personal_passphrase'
  set_fact:
    gpg_key_personal_passphrase: null

- name: Unset 'GPGKEY_PERSONAL_PASSPHRASE' env variable from SHELL
  shell: "unset GPGKEY_PERSONAL_PASSPHRASE"
